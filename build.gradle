plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id 'org.checkerframework' version '0.6.40'
}

apply plugin: 'org.checkerframework'

/**
 * Version setup
 */
def baseVersion = project.mod_version
def baseGroup = project.maven_group
def localPropertiesFile = file('local.properties')
def localProperties = new Properties()

if (localPropertiesFile.exists()) {
	localPropertiesFile.withInputStream { stream ->
		localProperties.load(stream)
	}
}

def envVars = System.getenv()
def currentEnvironment = envVars.getOrDefault("ENV", localProperties.getProperty("environment", "dev"))
def isDevelopment = currentEnvironment == "dev"
def localRepoDir = null
ext.versionModifier = null

if (localProperties.hasProperty("localRepoDir")) {
	localRepoDir = localProperties.getProperty("localRepoDir")
} else if (project.hasProperty("localRepoDir")) {
	localRepoDir = project.findProperty("localRepoDir")
}

if (isDevelopment) {
	versionModifier = "-SNAPSHOT"
}

def constructVersion(baseVersion) {
	def result = baseVersion + versionModifier
	return result
}

version = constructVersion(baseVersion)
group = baseGroup

println("Info: currentEnvironment = $currentEnvironment")
println("Info: isDevelopment = $isDevelopment")
println("Info: localRepoDir = $localRepoDir")
println("Info: versionModifier = $versionModifier")
println("Info: version = " + version)

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()

	maven {
		url 'https://jitpack.io'
	}

	// Lucko (spark)
	maven {
		url 'https://oss.sonatype.org/content/repositories/snapshots'
	}

	// NucleoidMC
	maven {
		url "https://maven.nucleoid.xyz/"
	}

	// PolyMC
	maven {
		url "https://maven.theepicblock.nl"
		content {
			includeGroup("nl.theepicblock")
		}
	}

	// Blackblock
	maven {
		url 'https://maven.blackblock.rocks/releases'
	}

	// Modrinth offers a maven repository
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}

	// Curseforge also offers a maven repository,
	// though dependencies have to use file id's
	exclusiveContent {
		forRepository {
			maven {
				url "https://cursemaven.com"
			}
		}
		filter {
			includeGroup "curse.maven"
		}
	}

	if (isDevelopment && localRepoDir) {
		maven {
			url localRepoDir
		}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/blackblockbib.accesswidener")
	splitEnvironmentSourceSets()

	mods {
		"blackblock-bib" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Gnembon's Carpet mod
	// Carpet has no Maven repository (and the one on Modrinth is always outdated)
	// So we have to use Curseforge
	modImplementation "curse.maven:carpet-349239:${project.carpet_cf_file_id}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//  Apache Commons Text is a library focused on algorithms working on strings
	modImplementation include("org.apache.commons:commons-text:${project.apache_commons_text}")

	// JColor allows you to print messages with a colored font or background on a terminal
	modImplementation include("com.diogonunes:JColor:${project.jcolor_version}")

	// Spark is a performance profiler
	modImplementation "me.lucko:spark-api:${project.spark_api_version}"

	// Servercore is a mod that aims to optimize the minecraft server
	modImplementation "maven.modrinth:servercore:${project.servercore_version}"

	// Luckperms permissions
	modImplementation "net.luckperms:api:${project.luckperms_api_version}"

	// The Sentry client for error reporting
	modImplementation include("io.sentry:sentry:${project.sentry_version}")
}

// Modify the contents of the "fabric.mod.json" file
processResources {
	inputs.property "version", baseVersion

	filesMatching("fabric.mod.json") {
		expand "version": baseVersion
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = archives_base_name

			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		if (isDevelopment && localRepoDir) {
			maven {
				name = 'local'
				url = uri(localRepoDir)
			}
		}
	}
}